{"version":3,"file":"main.a3e5eaadebe5282d46e3.bundle.js","sources":["webpack:///./src/CardInput/index.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { TextInput } from '../TextInput';\n\nimport masterCard from './icons/master.svg';\nimport empty from './icons/empty.svg';\nimport visa from './icons/visa.svg';\nimport arca from './icons/arca.svg';\n\nconst cardTypes = {\n  masterCard,\n  empty,\n  visa,\n  arca,\n};\n\nexport class CardInput extends React.Component {\n  static format(value) {\n    const matches = value.replace(/ /g, '').match(/\\d{4,16}/g);\n    const match = (matches && matches[0]) || '';\n    const parts = [];\n\n    for (let i = 0; i < match.length; i += 4) {\n      parts.push(match.substring(i, i + 4));\n    }\n\n    if (parts.length) {\n      return parts.join(' ');\n    }\n\n    return value;\n  }\n\n  constructor(props) {\n    super(props);\n\n    const { value } = this.props;\n\n    this.state = {\n      cardType: CardInput.getCardType(value),\n      value: CardInput.format(value),\n    };\n  }\n\n  static getDerivedStateFromProps({ value }, { cardType }) {\n    return {\n      cardType: CardInput.getCardType(value, cardType),\n      value: CardInput.format(value),\n    };\n  }\n\n  onKeyPress = (event) => {\n    const { onKeyPress } = this.props;\n    const { value } = this.state;\n\n    const selection = window.getSelection();\n\n    if (!/^\\d+$/.test(event.key) || ((!selection || selection.toString() === '') && value.length === 19)) {\n      event.preventDefault();\n    }\n\n    if (onKeyPress) {\n      onKeyPress(event);\n    }\n  };\n\n  onKeyDown = (event) => {\n    const { target: { value, selectionStart } } = event;\n    const { value: currentValue } = this.state;\n    const { onKeyDown } = this.props;\n\n    const position = selectionStart;\n    let nextValue;\n\n    if (event.keyCode === 46 && (position + 1) % 5 === 0) {\n      const start = currentValue.substr(0, position);\n      const end = currentValue.substr(position + 2, currentValue.length - position);\n\n      nextValue = CardInput.format(`${start}${end}`);\n\n      this.caretPosition = position;\n    } else if (event.keyCode === 8 && position % 5 === 0) {\n      const start = currentValue.substr(0, position - 2);\n      const end = currentValue.substr(position, currentValue.length - position);\n\n      nextValue = CardInput.format(`${start}${end}`);\n\n      this.caretPosition = position - 1;\n\n      if (nextValue.length === value.length - 1) {\n        this.caretPosition--;\n      }\n    }\n\n    if (nextValue) {\n      this.emitChange(nextValue);\n      event.preventDefault();\n    }\n\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  };\n\n  onChange = (event) => {\n    const { currentTarget: { value } } = event;\n    const { value: currentValue } = this.state;\n    const nextValue = CardInput.format(value);\n\n    this.caretPosition = event.target.selectionStart;\n\n    if (this.caretPosition % 5 === 0 && currentValue.length < value.length) {\n      if (this.caretPosition === value.length) {\n        this.caretPosition += 2;\n      } else {\n        this.caretPosition += 1;\n      }\n    }\n\n    this.emitChange(nextValue);\n  };\n\n  static getCardType(value, cardType) {\n    let nextCardType = cardType;\n\n    const firstDigit = +value[0];\n    const firstTwoDigit = +value.substr(0, 2);\n    const firstFourDigit = +value.substr(0, 4);\n\n    if (firstDigit === 4) {\n      nextCardType = 'visa';\n    } else if (\n      (firstTwoDigit > 50 && firstTwoDigit < 56)\n      || (firstFourDigit > 2220 && firstFourDigit < 2721)\n    ) {\n      nextCardType = 'masterCard';\n    } else if (nextCardType !== 'empty') {\n      nextCardType = 'empty';\n    }\n\n    return nextCardType;\n  }\n\n  updateCaretPosition = () => {\n    this.input.focus();\n    this.input.setSelectionRange(this.caretPosition, this.caretPosition);\n  };\n\n  setInputRef = (ref) => {\n    this.input = ref;\n  };\n\n  emitChange(value) {\n    const { name, onChange } = this.props;\n\n    this.updateCaretPosition();\n\n    if (onChange) {\n      onChange({ name, value: value.replace(/ /g, '') });\n    }\n  }\n\n  render() {\n    const { cardType, value } = this.state;\n\n    return (\n      <TextInput\n        {...this.props}\n        placeholder='____ ____ ____ ____'\n        onKeyPress={this.onKeyPress}\n        onKeyDown={this.onKeyDown}\n        forwardedRef={this.setInputRef}\n        onChange={this.onChange}\n        icon={(\n          <img\n            src={cardTypes[cardType]}\n            alt='card-icon'\n          />\n        )}\n        value={value}\n      />\n    );\n  }\n}\n\nCardInput.propTypes = {\n  /** Function, will be called when input is focused and any key pressed */\n  onKeyPress: PropTypes.func,\n  /** Function, will be called when input is focused and any key pressed down */\n  onKeyDown: PropTypes.func,\n  /** Function, will be called when input value changed */\n  onChange: PropTypes.func,\n  /** String, value of input */\n  value: PropTypes.string,\n  /** String, name of input */\n  name: PropTypes.string,\n};\n\nCardInput.defaultProps = {\n  onKeyPress: undefined,\n  onKeyDown: undefined,\n  onChange: undefined,\n  value: '',\n  name: '',\n};\n"],"mappings":"AAUA","sourceRoot":""}